<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SourceCode.Clay.Algorithms</name>
    </assembly>
    <members>
        <member name="T:SourceCode.Clay.Algorithms.Edge`1">
            <summary>
            Represents a directed graph edge.
            </summary>
            <typeparam name="T">The type of the vertices in the edge.</typeparam>
        </member>
        <member name="P:SourceCode.Clay.Algorithms.Edge`1.From">
            <summary>
            The vertex that the edge originates from.
            </summary>
        </member>
        <member name="P:SourceCode.Clay.Algorithms.Edge`1.To">
            <summary>
            The vertex that the edge terminates at.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.#ctor(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.Edge`1"/> value.
            </summary>
            <param name="from">The vertex that the edge originates from.</param>
            <param name="to">The vertex that the edge terminates at.</param>
            <param name="equalityComparer"></param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.ToString">
            <summary>
            Returns a string representation of the edge.
            </summary>
            <returns>A string representation of the edge.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.Equals(System.Object)">
            <summary>
            Determines if this edge is equal to another edge.
            </summary>
            <param name="obj">The other edge.</param>
            <returns>A value indicating whether this edge is equal to another.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.Equals(SourceCode.Clay.Algorithms.Edge{`0})">
            <summary>
            Determines if this edge is equal to another edge.
            </summary>
            <param name="other">The other edge.</param>
            <returns>A value indicating whether this edge is equal to another.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hashcode for this instance.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.op_Equality(SourceCode.Clay.Algorithms.Edge{`0},SourceCode.Clay.Algorithms.Edge{`0})">
            <summary>
            Implements the equality operator for <see cref="T:SourceCode.Clay.Algorithms.Edge`1"/>.
            </summary>
            <param name="edge1">The first edge to compare.</param>
            <param name="edge2">The second edge to compare.</param>
            <returns>A value indicating whether the edges are equal.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Edge`1.op_Inequality(SourceCode.Clay.Algorithms.Edge{`0},SourceCode.Clay.Algorithms.Edge{`0})">
            <summary>
            Implements the inequality operator for <see cref="T:SourceCode.Clay.Algorithms.Edge`1"/>.
            </summary>
            <param name="edge1">The first edge to compare.</param>
            <param name="edge2">The second edge to compare.</param>
            <returns>A value indicating whether the edges are not equal.</returns>
        </member>
        <member name="T:SourceCode.Clay.Algorithms.Graph">
            <summary>
            Factory methods for <see cref="T:SourceCode.Clay.Algorithms.Graph`1"/>.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Graph.Create``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.Graph`1"/> value.
            </summary>
            <typeparam name="T">The type of the vertices in the graph.</typeparam>
            <param name="capacity">The initial capacity of the graph.</param>
            <param name="equalityComparer">The equality comparer for vertices.</param>
            <returns>The <see cref="T:SourceCode.Clay.Algorithms.Graph`1"/>.</returns>
        </member>
        <member name="T:SourceCode.Clay.Algorithms.Graph`1">
            <summary>
            Represents several algorithms that can be performed on a graph.
            </summary>
            <typeparam name="T">The type of the vertices in the graph.</typeparam>
            <remarks>Multiple algorithms should not be executed against a single instance of this structure.</remarks>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Graph`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.Graph`1"/> value.
            </summary>
            <param name="capacity">The initial capacity of the graph.</param>
            <param name="equalityComparer">The equality comparer for vertices.</param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Graph`1.Add(`0,`0)">
            <summary>
            Adds the specified directed edge to the graph.
            </summary>
            <param name="from">The vertex that the edge originates from.</param>
            <param name="to">The vertex that the edge terminates at.</param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Graph`1.ToRepresentativeForest(System.Action{SourceCode.Clay.Algorithms.Edge{`0}},System.Action{SourceCode.Clay.Algorithms.TreeNode{`0}})">
            <summary>
            Converts the graph into a representative forest.
            </summary>
            <param name="onCycle">A callback that is invoked when a cycle is detected.</param>
            <param name="onTreeNode">A callback that is invoked when a tree node is detected.</param>
            <remarks>
            A representative forest is a collection of trees and cycles that is used to answer traversal
            queries.
            
            Traversing the forest (towards either parents or children) will traverse the original
            graph in that direction.  Note that a single node may appear multiple times within the
            forest.
            
            Each node in the forest is represented by a cycle that has at minimum one element. Nodes that
            are represented by multiple elements are virtualized cycles: traversal queries will always visit
            every node in the cycle no matter the traversal direction.
            
            To correctly perform a traversal query the following steps should be performed, given node <c>N</c>.
            
            <list type="number">
                <item><description>
                    Find the unique set of <see cref="P:SourceCode.Clay.Algorithms.Edge`1.From"/> where the associated <see cref="P:SourceCode.Clay.Algorithms.Edge`1.To"/> is <c>N</c>.
                </description></item>
                <item><description>
                    Find the unique list of <see cref="P:SourceCode.Clay.Algorithms.TreeNode`1.Hierarchy"/> where <see cref="P:SourceCode.Clay.Algorithms.TreeNode`1.Node"/> appears in the set created in (1).
                </description></item>
                <item><description>
                    Find the unique set of <see cref="P:SourceCode.Clay.Algorithms.TreeNode`1.Node"/> according to traversing the forest, starting at the hierarchies discovered in (2).
                </description></item>
                <item><description>
                    Find the unique set of <see cref="P:SourceCode.Clay.Algorithms.Edge`1.To"/> where the associated <see cref="P:SourceCode.Clay.Algorithms.Edge`1.From"/> appears in the set created in (3).
                </description></item>
            </list>
            
            A single list instance is used across <paramref name="onTreeNode"/> invocations, <see cref="M:SourceCode.Clay.Algorithms.TreeNode`1.Clone"/> must be called if 
            <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/> instances are persisted in memory after the callback completes.
            </remarks>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.Graph`1.Tarjan">
            <summary>
            Identifies strongly connected components (cycles) in a graph and performs a topological sort, by using
            Tarjan's Strongly Connected Components Algorithm.
            </summary>
            <remarks>
            All nodes in the graph appear in at least one strongly connected component (that may only contain the node itself). The
            graph is only cyclic if any cycle contains more than one node.
            </remarks>
            <returns>The list of strongly connected components.</returns>
        </member>
        <member name="T:SourceCode.Clay.Algorithms.TreeNode`1">
            <summary>
            Represents a tree node that uses a hierarchy path for positioning.
            </summary>
            <typeparam name="T">The type of the node in the tree.</typeparam>
        </member>
        <member name="P:SourceCode.Clay.Algorithms.TreeNode`1.Hierarchy">
            <summary>
            Gets the list of integers that index to the tree node position.
            </summary>
        </member>
        <member name="P:SourceCode.Clay.Algorithms.TreeNode`1.Node">
            <summary>
            Gets the node value.
            </summary>
        </member>
        <member name="P:SourceCode.Clay.Algorithms.TreeNode`1.HierarchyPath">
            <summary>
            Gets a path containing <see cref="P:SourceCode.Clay.Algorithms.TreeNode`1.Hierarchy"/> elements separated by a '/' character.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/> value.
            </summary>
            <param name="node">The node value.</param>
            <param name="equalityComparer">The equality comparer used to compare values.</param>
            <param name="hierarchy">The list of integers that index to the tree node position.</param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0},System.Int32[])">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/> value.
            </summary>
            <param name="node">The node value.</param>
            <param name="equalityComparer">The equality comparer used to compare values.</param>
            <param name="hierarchy">The list of integers that index to the tree node position.</param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.#ctor(`0,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/> value.
            </summary>
            <param name="node">The node value.</param>
            <param name="hierarchy">The list of integers that index to the tree node position.</param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.#ctor(`0,System.Int32[])">
            <summary>
            Creates a new <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/> value.
            </summary>
            <param name="node">The node value.</param>
            <param name="hierarchy">The list of integers that index to the tree node position.</param>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.Clone">
            <summary>
            Clones the <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/> so that it contains a unique instance of <see cref="P:SourceCode.Clay.Algorithms.TreeNode`1.Hierarchy"/>.
            </summary>
            <returns>The <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/>.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.ToString">
            <summary>
            Returns a string representation of the tree node.
            </summary>
            <returns>A string representation of the tree node.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.Equals(System.Object)">
            <summary>
            Determines if this tree node is equal to another tree node.
            </summary>
            <param name="obj">The other tree node.</param>
            <returns>A value indicating whether this tree node is equal to another.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.Equals(SourceCode.Clay.Algorithms.TreeNode{`0})">
            <summary>
            Determines if this tree node is equal to another tree node.
            </summary>
            <param name="other">The other tree node.</param>
            <returns>A value indicating whether this tree node is equal to another.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hashcode for this instance.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.op_Equality(SourceCode.Clay.Algorithms.TreeNode{`0},SourceCode.Clay.Algorithms.TreeNode{`0})">
            <summary>
            Implements the equality operator for <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/>.
            </summary>
            <param name="node1">The first tree node to compare.</param>
            <param name="node2">The second tree node to compare.</param>
            <returns>A value indicating whether the tree nodes are equal.</returns>
        </member>
        <member name="M:SourceCode.Clay.Algorithms.TreeNode`1.op_Inequality(SourceCode.Clay.Algorithms.TreeNode{`0},SourceCode.Clay.Algorithms.TreeNode{`0})">
            <summary>
            Implements the inequality operator for <see cref="T:SourceCode.Clay.Algorithms.TreeNode`1"/>.
            </summary>
            <param name="node1">The first tree node to compare.</param>
            <param name="node2">The second tree node to compare.</param>
            <returns>A value indicating whether the tree nodes are not equal.</returns>
        </member>
    </members>
</doc>
