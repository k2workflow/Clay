<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SourceCode.Clay.Collections</name>
    </assembly>
    <members>
        <member name="T:SourceCode.Clay.Collections.Generic.DictionaryExtensions">
            <summary>
            Represents extensions for Dictionary and IReadOnlyDictionary.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.DictionaryExtensions.NullableDictionaryEqual``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs an efficient item-by-item comparison of two enumerables
            using the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> from the first dictionary for Key comparisons
            and the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for Value comparisons.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
            <param name="xe">Input 1</param>
            <param name="ye">Input 2</param>
            <param name="valueComparer">The comparer to use to test for Value equality.</param>
            <returns></returns>
        </member>
        <member name="T:SourceCode.Clay.Collections.Generic.EnumerableExtensions">
            <summary>
            Represents extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.EnumerableExtensions.NullableSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs an optimized item-by-item comparison of two enumerables, using a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            The lists are required to have corresponding items in the same ordinal position.
            </summary>
            <typeparam name="TSource">The type of items.</typeparam>
            <param name="xe">Input 1</param>
            <param name="ye">Input 2</param>
            <param name="comparer">The comparer to use to test for equality.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.EnumerableExtensions.BothAreCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Int32@)">
            <summary>
            If both inputs are some kind of collection, then output their relative counts.
            </summary>
            <typeparam name="TSource">The type of items.</typeparam>
            <param name="xe">Input 1</param>
            <param name="ye">Input 2</param>
            <param name="xCount">The Count of members in input 1.</param>
            <param name="yCount">The Count of members in input 2.</param>
            <returns></returns>
        </member>
        <member name="T:SourceCode.Clay.Collections.Generic.IDynamicSwitch`2">
            <summary>
            Interface used for exposing dynamic switch statements.
            The members are very similar to those exposed by <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <typeparam name="TKey">The type of key used in the switch.</typeparam>
            <typeparam name="TValue">The type of value used in the switch.</typeparam>
        </member>
        <member name="P:SourceCode.Clay.Collections.Generic.IDynamicSwitch`2.Count">
            <summary>
            The number of items in the switch.
            </summary>
        </member>
        <member name="P:SourceCode.Clay.Collections.Generic.IDynamicSwitch`2.Item(`0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.IDynamicSwitch`2.ContainsKey(`0)">
            <summary>
            Checks whether the specified key is present in the switch.
            </summary>
            <param name="key">The key value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.IDynamicSwitch`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value corresponding to the specified key.
            </summary>
            <param name="key">The key value.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory">
            <summary>
            Factory method that enable the creation of KeyedCollections.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory.Create``2(System.Collections.Generic.IEnumerable{``1}@,System.Func{``1,``0}@,System.Collections.Generic.IEqualityComparer{``0}@,System.Int32)">
            <summary>
            Creates a Dictionary that stores values containing embedded keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
            <param name="items">The items to populate the dictionary with.</param>
            <param name="keyExtractor">A delegate that extracts the embedded key from each item.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="dictionaryCreationThreshold">The number of elements the collection can hold without creating a lookup dictionary.
            (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.
            </param>
            <returns>An instance of the Dictionary.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory.Create``2(System.Func{``1,``0}@,System.Collections.Generic.IEqualityComparer{``0}@,System.Int32)">
            <summary>
            Creates a Dictionary that stores values containing embedded keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
            <param name="keyExtractor">A delegate that extracts the embedded key from each item.</param>
            <param name="comparer">The comparer to use.</param>
            <param name="dictionaryCreationThreshold">The number of elements the collection can hold without creating a lookup dictionary.
            (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.
            </param>
            <returns>An instance of the Dictionary.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory.Create``2(System.Collections.Generic.IEnumerable{``1}@,System.Func{``1,``0}@,System.Collections.Generic.IEqualityComparer{``0}@)">
            <summary>
            Creates a Dictionary that stores values containing embedded keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
            <param name="items">The items to populate the dictionary with.</param>
            <param name="keyExtractor">A delegate that extracts the embedded key from each item.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>An instance of the Dictionary.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory.Create``2(System.Func{``1,``0}@,System.Collections.Generic.IEqualityComparer{``0}@)">
            <summary>
            Creates a Dictionary that stores values containing embedded keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
            <param name="keyExtractor">A delegate that extracts the embedded key from each item.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>An instance of the Dictionary.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory.Create``2(System.Collections.Generic.IEnumerable{``1}@,System.Func{``1,``0}@)">
            <summary>
            Creates a Dictionary that stores values containing embedded keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
            <param name="items">The items to populate the dictionary with.</param>
            <param name="keyExtractor">A delegate that extracts the embedded key from each item.</param>
            <returns>An instance of the Dictionary.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.KeyedCollectionFactory.Create``2(System.Func{``1,``0}@)">
            <summary>
            Creates a Dictionary that stores values containing embedded keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
            <param name="keyExtractor">A delegate that extracts the embedded key from each item.</param>
            <returns>An instance of the Dictionary.</returns>
        </member>
        <member name="T:SourceCode.Clay.Collections.Generic.SetExtensions">
            <summary>
            Represents extensions for <see cref="T:System.Collections.Generic.ISet`1"/>.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SetExtensions.NullableSetEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs an efficient item-by-item comparison of two enumerables, using a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TSource">The type of items.</typeparam>
            <param name="xe">Input 1</param>
            <param name="ye">Input 2</param>
            <param name="comparer">The comparer to use to test for equality.</param>
            <returns></returns>
        </member>
        <member name="T:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2">
            <summary>
            Base class for dynamic switches.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2.#ctor(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2"/> class.
            </summary>
            <param name="cases">The cases.</param>
        </member>
        <member name="P:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2.Count">
            <summary>
            The number of items in the switch.
            </summary>
        </member>
        <member name="P:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2.Item(`0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2.ContainsKey(`0)">
            <summary>
            Checks whether the specified key is present in the switch.
            </summary>
            <param name="key">The key value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value corresponding to the specified key.
            </summary>
            <param name="key">The key value.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchBuilderImpl`2.BuildSwitchExpression(System.Collections.Generic.IReadOnlyDictionary{`0,`1}@)">
            <summary>
            Builds the underlying <see cref="T:System.Linq.Expressions.Expression"/> based switch.
            </summary>
            <param name="cases">The cases to transform into a dynamic switch.</param>
            <returns>A lambda that returns an index for a specified key value.</returns>
        </member>
        <member name="T:SourceCode.Clay.Collections.Generic.SwitchExtensions">
            <summary>
            Represents extensions that generate dynamic switches from dictionaries and lists.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.Boolean,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.Boolean"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.Byte,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.Byte"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.SByte,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.SByte"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.Int16,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.Int16"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.UInt16,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.UInt16"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.Int32,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.Int32"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyDictionary{System.UInt32,``0})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.UInt32"/> keys.
            </summary>
            <typeparam name="TSource">The type of the elements.</typeparam>
            <param name="cases">The items to convert into a dynamic switch statement.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Int32},System.Func{``0,``1})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.Int32"/> keys.
            </summary>
            <typeparam name="TItem">The type of the elements.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="cases">The items.</param>
            <param name="keyExtractor">The key extractor.</param>
            <param name="valueExtractor">The value extractor.</param>
            <returns>The compiled switch statement.</returns>
        </member>
        <member name="M:SourceCode.Clay.Collections.Generic.SwitchExtensions.ToDynamicSwitch``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Int32})">
            <summary>
            Builds a dynamic switch with <see cref="T:System.Int32"/> keys.
            </summary>
            <typeparam name="TItem">The type of the elements.</typeparam>
            <param name="cases">The items.</param>
            <param name="keyExtractor">The key extractor.</param>
            <returns>The compiled switch statement.</returns>
        </member>
    </members>
</doc>
