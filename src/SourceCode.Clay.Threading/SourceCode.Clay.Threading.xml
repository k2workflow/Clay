<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SourceCode.Clay.Threading</name>
    </assembly>
    <members>
        <member name="T:SourceCode.Clay.Threading.ParallelAsync">
            <summary>
            Provides support for asynchronous looping.
            </summary>
        </member>
        <member name="M:SourceCode.Clay.Threading.ParallelAsync.ForAsync(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{System.Int32,System.Threading.Tasks.Task})">
            <summary>
            Executes a For loop in which executions may run asynchronously.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="options">Options that control the loop execution.</param>
            <param name="action">The delegate that is invoked once per iteration.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Threading.ParallelAsync.ForAsync``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{System.Int32,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes a For loop in which executions may run in parallel. Returns a set of correlated values.
            </summary>
            <typeparam name="TValue">The type of items to return.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="options">Options that control the loop execution.</param>
            <param name="func">The delegate that is invoked once per iteration.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Threading.ParallelAsync.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes a ForEach loop in which executions may run in parallel.
            </summary>
            <typeparam name="TSource">The type of items in the source data.</typeparam>
            <param name="source">An enumerable data source.</param>
            <param name="options">Options that control the loop execution.</param>
            <param name="action">The delegate that is invoked once per iteration.</param>
            <returns></returns>
        </member>
        <member name="M:SourceCode.Clay.Threading.ParallelAsync.ForEachAsync``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.KeyValuePair{``0,``1}}})">
            <summary>
            Executes a ForEach loop in which executions may run in parallel. Returns a set of correlated values.
            </summary>
            <typeparam name="TSource">The type of items in the source data.</typeparam>
            <typeparam name="TValue">The type of items to return.</typeparam>
            <param name="source">An enumerable data source.</param>
            <param name="options">Options that control the loop execution.</param>
            <param name="func">The delegate that is invoked once per iteration.</param>
            <returns></returns>
        </member>
    </members>
</doc>
